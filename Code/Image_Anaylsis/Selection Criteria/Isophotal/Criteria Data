import numpy as np
import h5py
import matplotlib.pyplot as plt
from matplotlib import colors
from random import randrange
from astropy.io import fits, ascii
from astropy.table import QTable

hdf = h5py.File('first_catalogue.hdf5', 'r')
all_filters = ['f435w', 'f606w', 'f775w', 'f814w', 'f850lp', 'f105w', 'f125w', 'f140w', 'f160w']
nJy_to_es = {'f435w': 0.005171303179169625, 'f606w': 0.011015393095414123, 'f775w': 0.005142804319487919, 'f814w': 0.0066619290022345385, 'f850lp': 0.0024366884234595892, 'f105w': 0.008863392873279346, 'f125w': 0.008550667128846823, 'f140w': 0.010490592077764458, 'f160w': 0.006582638416409025}


#Extracting the iso flux and sn data
iso_sig_dic = {}
iso_err_dic ={}
iso_sn_dic = {}

for f in all_filters:
    iso_sig_dic[f] = (hdf['photometry']['iso'][f]['flux'][:])/nJy_to_es[f]
    iso_err_dic[f] = (hdf['photometry']['iso'][f]['noise'][:])/nJy_to_es[f]
    iso_sn_dic[f] = hdf['photometry']['iso'][f]['S/N'][:]
   
   
#Creating the colours for color-color plots
def colour(f_A,f_B):
return -2.5*np.log10(f_A/f_B)

V_IZ = np.zeros(len(iso_sig_dic['f775w'])) 
IZ_Y = np.zeros(len(iso_sig_dic['f775w'])) 
Y_J = np.zeros(len(iso_sig_dic['f775w'])) 
J_H = np.zeros(len(iso_sig_dic['f775w'])) 


for i in range(len(iso_sig_dic['f775w'])):
    V_IZ[i] = colour(iso_sig_dic['f606w'][i],iso_sig_dic['f814w'][i])
    IZ_Y[i] = colour(iso_sig_dic['f814w'][i], iso_sig_dic['f105w'][i])
    Y_J[i] = colour(iso_sig_dic['f105w'][i], iso_sig_dic['f125w'][i])
    J_H[i] = colour(iso_sig_dic['f125w'][i], iso_sig_dic['f160w'][i])
    
#Signal to noise in each filter    
SN_B = iso_sn_dic['f435w'][:]
SN_V = iso_sn_dic['f606w'][:]
SN_IZ = iso_sn_dic['f814w'][:]
SN_Y = iso_sn_dic['f105w'][:]
SN_J = iso_sn_dic['f125w'][:]
SN_H = iso_sn_dic['f160w'][:]

#The linear region for the criteria
#Need gradient,m, and intercept,c.
m1 = (1.5 - 1)/0.5
m2 = (1.7-1.2)/0.5
m3 = (1.5-1)/0.25
c1 = 1
c2 = 1.2
c3 = 1

def y1(x):
    return m1*x + c1

def y2(x):
    return m2*x + c2

def y3(x):
    return m3*x + c3
    
    
#Selection Criteria
z4_selection = (SN_B<1.5)&(SN_Y>7)&(V_IZ>1)&(IZ_Y<0.5)&(y1(IZ_Y)<V_IZ)
z6_selection = (SN_B<1.5)&(SN_V<1.5)&(SN_J>7)&(Y_J<0.5)&(IZ_Y>1.2)&(y2(Y_J)<IZ_Y)
z8_selection = (SN_B<1.5)&(SN_V<1.5)&(SN_IZ<1.5)&(SN_H>7)&(Y_J>1)&(J_H<0.5)&(y3(J_H)<Y_J)



#Finding the z4,6 and 8 candidates through selection criteria
z4 = {}
SN7Y = {}

#z4 selection
z4['V_IZ'] = V_IZ[z4_selection]
z4['IZ_Y'] = IZ_Y[z4_selection]
z4['Y_J'] = Y_J[z4_selection]
z4['J_H'] = J_H[z4_selection]

#z4 s/n selection
# z4['sn_V_IZ'] = SN_IZ[z4_selection]
z4['sn_Y'] = SN_Y[z4_selection]
z4['sn_J'] = SN_J[z4_selection]
z4['sn_H'] = SN_H[z4_selection]

#Points with jt Y S/N > 7
SN7Y['V_IZ'] = V_IZ[(SN_Y>7)]
SN7Y['IZ_Y'] = IZ_Y[(SN_Y>7)]
SN7Y['Y_J'] = Y_J[(SN_Y>7)]
SN7Y['J_H'] = J_H[(SN_Y>7)]

#z6 selection
z6 = {}
z6['V_IZ'] = V_IZ[z6_selection]
z6['IZ_Y'] = IZ_Y[z6_selection]
z6['Y_J'] = Y_J[z6_selection]
z6['J_H'] = J_H[z6_selection]

#z6 s/n selection
# z6['sn_V_IZ'] = SN_IZ[z6_selection]
z6['sn_Y'] = SN_Y[z6_selection]
z6['sn_J'] = SN_J[z6_selection]
z6['sn_H'] = SN_H[z6_selection]

#z8 selection
z8 = {}
z8['V_IZ'] = V_IZ[z8_selection]
z8['IZ_Y'] = IZ_Y[z8_selection]
z8['Y_J'] = Y_J[z8_selection]
z8['J_H'] = J_H[z8_selection]

#z8 s/n selection
# z8['sn_V_IZ'] = SN_IZ[z8_selection]
z8['sn_Y'] = SN_Y[z8_selection]
z8['sn_J'] = SN_J[z8_selection]
z8['sn_H'] = SN_H[z8_selection]

#The number of candidates found at each z.
print('Number of z4 candidates:'+ str(len(z4['V_IZ'])))
print('Number of z6 candidates:'+ str(len(z6['V_IZ'])))
print('Number of z8 candidates:'+ str(len(z8['V_IZ'])))
